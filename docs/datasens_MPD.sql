-- ======================================================
-- DATA MODEL: DataSens – Modèle Physique de Données (PostgreSQL)
-- Version: vFinal (alignée MCD/MLD T01..T36 + T37)
-- Auteur: Alan Jaffré (2025)
-- ======================================================

-- (Optionnel) Schéma dédié
CREATE SCHEMA IF NOT EXISTS datasens;
SET search_path TO datasens, public;

-- ==========================
-- 0) Utilitaires / Enums
-- ==========================
-- Polarity standardisée
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'polarity_enum') THEN
    CREATE TYPE polarity_enum AS ENUM ('positive','neutre','negative');
  END IF;
END$$;

-- ==========================
-- 1) Domaine COLLECTE
-- ==========================
-- T01_TYPE_DONNEE
CREATE TABLE IF NOT EXISTS t01_type_donnee (
  id_type_donnee INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  libelle        VARCHAR(100) NOT NULL,
  description    TEXT,
  frequence_maj  VARCHAR(50),      -- quotidienne / hebdo / mensuelle / temps réel
  categorie_metier VARCHAR(50)     -- descriptive / usage / evaluation / qualite
);

-- T02_SOURCE
CREATE TABLE IF NOT EXISTS t02_source (
  id_source       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_type_donnee  INT REFERENCES t01_type_donnee(id_type_donnee) ON DELETE SET NULL,
  nom             VARCHAR(100) NOT NULL,
  url             TEXT,
  fiabilite       FLOAT CHECK (fiabilite BETWEEN 0 AND 1)
);

-- T03_FLUX
CREATE TABLE IF NOT EXISTS t03_flux (
  id_flux       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_source     INT NOT NULL REFERENCES t02_source(id_source) ON DELETE CASCADE,
  date_collecte TIMESTAMP NOT NULL DEFAULT NOW(),
  format        VARCHAR(20),       -- csv / json / xml / parquet
  manifest_uri  TEXT               -- chemin MinIO / S3
);
CREATE INDEX IF NOT EXISTS idx_flux_source ON t03_flux(id_source);
CREATE INDEX IF NOT EXISTS idx_flux_date   ON t03_flux(date_collecte);

-- T37_ARCHIVE_FLUX
CREATE TABLE IF NOT EXISTS t37_archive_flux (
  id_archive   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_source    INT NOT NULL REFERENCES t02_source(id_source) ON DELETE CASCADE,
  date_archive TIMESTAMP NOT NULL DEFAULT NOW(),
  chemin_archive TEXT
);
CREATE INDEX IF NOT EXISTS idx_arch_flux_source ON t37_archive_flux(id_source);

-- ==========================
-- 2) Documents & Géographie
-- ==========================
-- Hiérarchie géographique 100% normalisée
-- T13_PAYS
CREATE TABLE IF NOT EXISTS t13_pays (
  id_pays INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom     VARCHAR(100) NOT NULL
);

-- T14_REGION
CREATE TABLE IF NOT EXISTS t14_region (
  id_region INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_pays   INT NOT NULL REFERENCES t13_pays(id_pays) ON DELETE CASCADE,
  nom       VARCHAR(100) NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_region_pays ON t14_region(id_pays);

-- T15_DEPARTEMENT
CREATE TABLE IF NOT EXISTS t15_departement (
  id_departement INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_region      INT NOT NULL REFERENCES t14_region(id_region) ON DELETE CASCADE,
  code_dept      VARCHAR(5),
  nom            VARCHAR(100) NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_dept_region ON t15_departement(id_region);

-- T16_COMMUNE
CREATE TABLE IF NOT EXISTS t16_commune (
  id_commune    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_departement INT NOT NULL REFERENCES t15_departement(id_departement) ON DELETE CASCADE,
  code_insee    VARCHAR(10) UNIQUE,
  nom_commune   VARCHAR(100),
  lat           FLOAT,
  lon           FLOAT,
  population    INT
);
CREATE INDEX IF NOT EXISTS idx_commune_dept ON t16_commune(id_departement);

-- T17_TERRITOIRE (pivot = rattachement documentaire minimal)
CREATE TABLE IF NOT EXISTS t17_territoire (
  id_territoire INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_commune    INT NOT NULL REFERENCES t16_commune(id_commune) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_terr_commune ON t17_territoire(id_commune);

-- T04_DOCUMENT
CREATE TABLE IF NOT EXISTS t04_document (
  id_doc           INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_flux          INT REFERENCES t03_flux(id_flux) ON DELETE SET NULL,
  id_territoire    INT REFERENCES t17_territoire(id_territoire) ON DELETE SET NULL,
  titre            TEXT,
  texte            TEXT,
  langue           VARCHAR(10),
  date_publication TIMESTAMP,
  hash_fingerprint VARCHAR(64) UNIQUE
);
CREATE INDEX IF NOT EXISTS idx_doc_flux       ON t04_document(id_flux);
CREATE INDEX IF NOT EXISTS idx_doc_territoire ON t04_document(id_territoire);
CREATE INDEX IF NOT EXISTS idx_doc_date       ON t04_document(date_publication);

-- ==========================
-- 3) Annotations & Émotions
-- ==========================
-- T12_UTILISATEUR
CREATE TABLE IF NOT EXISTS t12_utilisateur (
  id_user     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom         VARCHAR(100),
  role        VARCHAR(50),          -- annotateur / admin / ia
  organisation VARCHAR(100)
);

-- T11_MODELE_IA
CREATE TABLE IF NOT EXISTS t11_modele_ia (
  id_modele  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom        VARCHAR(100) NOT NULL,
  version    VARCHAR(20),
  auteur     VARCHAR(100),
  type_modele VARCHAR(50),          -- Transformer / Classifier / Embedding...
  source_repo TEXT
);

-- T10_VALENCE
CREATE TABLE IF NOT EXISTS t10_valence (
  id_valence  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  label       VARCHAR(50) UNIQUE,   -- positive / neutre / negative
  description TEXT
);

-- T09_TYPE_EMOTION
CREATE TABLE IF NOT EXISTS t09_type_emotion (
  id_type_emotion INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_valence      INT REFERENCES t10_valence(id_valence) ON DELETE SET NULL,
  libelle         VARCHAR(100) NOT NULL,
  description     TEXT
);
CREATE INDEX IF NOT EXISTS idx_type_emotion_valence ON t09_type_emotion(id_valence);

-- T08_EMOTION
CREATE TABLE IF NOT EXISTS t08_emotion (
  id_emotion      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_type_emotion INT REFERENCES t09_type_emotion(id_type_emotion) ON DELETE SET NULL,
  id_modele       INT REFERENCES t11_modele_ia(id_modele) ON DELETE SET NULL,
  score_confiance FLOAT CHECK (score_confiance BETWEEN 0 AND 1)
);
CREATE INDEX IF NOT EXISTS idx_emotion_type   ON t08_emotion(id_type_emotion);
CREATE INDEX IF NOT EXISTS idx_emotion_modele ON t08_emotion(id_modele);

-- T05_ANNOTATION
CREATE TABLE IF NOT EXISTS t05_annotation (
  id_annotation  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_doc         INT NOT NULL REFERENCES t04_document(id_doc) ON DELETE CASCADE,
  id_user        INT REFERENCES t12_utilisateur(id_user) ON DELETE SET NULL,
  intensity      FLOAT CHECK (intensity BETWEEN 0 AND 1),
  polarity       polarity_enum,      -- 'positive'/'neutre'/'negative'
  date_annotation TIMESTAMP DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_ann_doc  ON t05_annotation(id_doc);
CREATE INDEX IF NOT EXISTS idx_ann_user ON t05_annotation(id_user);

-- T06_ANNOTATION_EMOTION (N–N)
CREATE TABLE IF NOT EXISTS t06_annotation_emotion (
  id_annotation   INT NOT NULL REFERENCES t05_annotation(id_annotation) ON DELETE CASCADE,
  id_emotion      INT NOT NULL REFERENCES t08_emotion(id_emotion) ON DELETE CASCADE,
  relevance_score FLOAT CHECK (relevance_score BETWEEN 0 AND 1),
  PRIMARY KEY (id_annotation, id_emotion)
);
CREATE INDEX IF NOT EXISTS idx_ae_emotion ON t06_annotation_emotion(id_emotion);

-- T07_META_ANNOTATION
CREATE TABLE IF NOT EXISTS t07_meta_annotation (
  id_meta_annotation INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_annotation      INT NOT NULL REFERENCES t05_annotation(id_annotation) ON DELETE CASCADE,
  id_modele          INT REFERENCES t11_modele_ia(id_modele) ON DELETE SET NULL,
  coherence_score    FLOAT CHECK (coherence_score BETWEEN 0 AND 1),
  commentaire        TEXT,
  date_evaluation    TIMESTAMP DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_meta_ann_ann   ON t07_meta_annotation(id_annotation);
CREATE INDEX IF NOT EXISTS idx_meta_ann_model ON t07_meta_annotation(id_modele);

-- ==========================
-- 4) Thèmes & Événements
-- ==========================
-- T23_THEME_CATEGORY
CREATE TABLE IF NOT EXISTS t23_theme_category (
  id_theme_cat INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  libelle      VARCHAR(100) NOT NULL,
  description  TEXT
);

-- T24_THEME
CREATE TABLE IF NOT EXISTS t24_theme (
  id_theme     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_theme_cat INT REFERENCES t23_theme_category(id_theme_cat) ON DELETE SET NULL,
  libelle      VARCHAR(100) NOT NULL,
  description  TEXT
);
CREATE INDEX IF NOT EXISTS idx_theme_cat ON t24_theme(id_theme_cat);

-- T25_EVENEMENT
CREATE TABLE IF NOT EXISTS t25_evenement (
  id_event   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_theme   INT REFERENCES t24_theme(id_theme) ON DELETE SET NULL,
  date_event TIMESTAMP,
  avg_tone   FLOAT,             -- tonalité moyenne (ex: GDELT)
  source_event VARCHAR(50)      -- "GDELT" / "Interne" ...
);
CREATE INDEX IF NOT EXISTS idx_event_theme ON t25_evenement(id_theme);
CREATE INDEX IF NOT EXISTS idx_event_date  ON t25_evenement(date_event);

-- T26_DOCUMENT_THEME (N–N)
CREATE TABLE IF NOT EXISTS t26_document_theme (
  id_doc  INT NOT NULL REFERENCES t04_document(id_doc) ON DELETE CASCADE,
  id_theme INT NOT NULL REFERENCES t24_theme(id_theme) ON DELETE CASCADE,
  PRIMARY KEY (id_doc, id_theme)
);
CREATE INDEX IF NOT EXISTS idx_doc_theme_theme ON t26_document_theme(id_theme);

-- T27_DOCUMENT_EVENEMENT (N–N)
CREATE TABLE IF NOT EXISTS t27_document_evenement (
  id_doc  INT NOT NULL REFERENCES t04_document(id_doc) ON DELETE CASCADE,
  id_event INT NOT NULL REFERENCES t25_evenement(id_event) ON DELETE CASCADE,
  PRIMARY KEY (id_doc, id_event)
);
CREATE INDEX IF NOT EXISTS idx_doc_event_event ON t27_document_evenement(id_event);

-- ==========================
-- 5) Indicateurs / Baromètres
-- ==========================
-- T28_SOURCE_BAROMETRE
CREATE TABLE IF NOT EXISTS t28_source_barometre (
  id_source_baro INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom            VARCHAR(100) NOT NULL,
  url            TEXT
);

-- T29_DOCUMENT_BARO (1–1 avec DOCUMENT via id_doc unique)
CREATE TABLE IF NOT EXISTS t29_document_baro (
  id_document_baro INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_source_baro   INT REFERENCES t28_source_barometre(id_source_baro) ON DELETE SET NULL,
  id_doc           INT UNIQUE REFERENCES t04_document(id_doc) ON DELETE CASCADE,
  date_pub         TIMESTAMP,
  titre            TEXT,
  lien             TEXT
);
CREATE INDEX IF NOT EXISTS idx_doc_baro_source ON t29_document_baro(id_source_baro);

-- T20_TYPE_INDICATEUR
CREATE TABLE IF NOT EXISTS t20_type_indicateur (
  id_type_indic INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code          VARCHAR(50) UNIQUE,   -- ex: "TAUX_CHOMAGE", "REV_MEDIAN"
  libelle       VARCHAR(100),
  unite         VARCHAR(20)
);

-- T21_SOURCE_INDICATEUR
CREATE TABLE IF NOT EXISTS t21_source_indicateur (
  id_source_indic INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom             VARCHAR(100),
  url             TEXT
);

-- T22_INDICATEUR
CREATE TABLE IF NOT EXISTS t22_indicateur (
  id_indic        INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_territoire   INT NOT NULL REFERENCES t17_territoire(id_territoire) ON DELETE CASCADE,
  id_type_indic   INT NOT NULL REFERENCES t20_type_indicateur(id_type_indic) ON DELETE RESTRICT,
  id_source_indic INT REFERENCES t21_source_indicateur(id_source_indic) ON DELETE SET NULL,
  valeur          FLOAT,
  annee           INT,
  CONSTRAINT uq_indic_unique UNIQUE (id_territoire, id_type_indic, annee)
);
CREATE INDEX IF NOT EXISTS idx_indic_terr_code ON t22_indicateur(id_territoire, id_type_indic);
CREATE INDEX IF NOT EXISTS idx_indic_source    ON t22_indicateur(id_source_indic);

-- ==========================
-- 6) Météo
-- ==========================
-- T18_TYPE_METEO
CREATE TABLE IF NOT EXISTS t18_type_meteo (
  id_type_meteo INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  libelle       VARCHAR(50) UNIQUE,   -- Pluie / Soleil / Neige / Orage...
  description   TEXT
);

-- T19_METEO
CREATE TABLE IF NOT EXISTS t19_meteo (
  id_meteo      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_territoire INT NOT NULL REFERENCES t17_territoire(id_territoire) ON DELETE CASCADE,
  id_type_meteo INT REFERENCES t18_type_meteo(id_type_meteo) ON DELETE SET NULL,
  date_obs      TIMESTAMP NOT NULL,
  temperature   FLOAT,      -- °C
  humidite      FLOAT,      -- %
  vent_kmh      FLOAT,      -- km/h
  pression      FLOAT       -- hPa
);
CREATE INDEX IF NOT EXISTS idx_meteo_terr_date ON t19_meteo(id_territoire, date_obs);

-- ==========================
-- 7) Pipeline & Qualité
-- ==========================
-- T30_PIPELINE
CREATE TABLE IF NOT EXISTS t30_pipeline (
  id_pipeline INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom         VARCHAR(100) NOT NULL,
  description TEXT,
  owner       VARCHAR(100),
  actif       BOOLEAN DEFAULT TRUE
);

-- T31_ETAPE_ETL
CREATE TABLE IF NOT EXISTS t31_etape_etl (
  id_etape    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_pipeline INT NOT NULL REFERENCES t30_pipeline(id_pipeline) ON DELETE CASCADE,
  ordre       INT NOT NULL,
  type        VARCHAR(50),      -- extract / transform / load / annotate / qc ...
  nom         VARCHAR(100)
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_etape_pipeline_ordre ON t31_etape_etl(id_pipeline, ordre);

-- T32_EXEC_ETAPE
CREATE TABLE IF NOT EXISTS t32_exec_etape (
  id_exec  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_etape INT NOT NULL REFERENCES t31_etape_etl(id_etape) ON DELETE CASCADE,
  debut    TIMESTAMP NOT NULL DEFAULT NOW(),
  fin      TIMESTAMP,
  statut   VARCHAR(30)        -- scheduled / running / success / failed
);
CREATE INDEX IF NOT EXISTS idx_exec_etape ON t32_exec_etape(id_etape);

-- (liaisons N–N “opérationnelles” via exécutions et résultats)
-- T33_QC_RULE
CREATE TABLE IF NOT EXISTS t33_qc_rule (
  id_qc     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code      VARCHAR(50) UNIQUE,   -- ex: "NO_DUP_HASH", "LANG_FR_ONLY"
  libelle   VARCHAR(100),
  niveau    VARCHAR(20),          -- bronze/silver/gold
  severite  VARCHAR(20),          -- info/warn/error
  definition TEXT
);

-- T34_QC_RESULT
CREATE TABLE IF NOT EXISTS t34_qc_result (
  id_qc_result   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_qc          INT NOT NULL REFERENCES t33_qc_rule(id_qc) ON DELETE CASCADE,
  id_exec        INT NOT NULL REFERENCES t32_exec_etape(id_exec) ON DELETE CASCADE,
  score          FLOAT,
  nb_non_conformes INT,
  details        TEXT
);
CREATE INDEX IF NOT EXISTS idx_qc_res_qc_exec ON t34_qc_result(id_qc, id_exec);

-- ==========================
-- 8) Audit / Versionning (techniques)
-- ==========================
-- T35_TABLE_AUDIT (table générique, pas de FK strictes)
CREATE TABLE IF NOT EXISTS t35_table_audit (
  id_audit   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  table_name VARCHAR(100) NOT NULL,
  record_id  INT,
  action     VARCHAR(20),          -- INSERT / UPDATE / DELETE
  old_values JSONB,
  new_values JSONB,
  "user"    VARCHAR(100),
  ts         TIMESTAMP NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_audit_table_ts ON t35_table_audit(table_name, ts);

-- T36_TABLE_VERSION
CREATE TABLE IF NOT EXISTS t36_table_version (
  id_version  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  table_name  VARCHAR(100) NOT NULL,
  schema_hash VARCHAR(64),          -- empreinte de structure
  applied_at  TIMESTAMP NOT NULL DEFAULT NOW(),
  comment     TEXT
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_table_version_last ON t36_table_version(table_name, applied_at);

-- ==========================
-- 9) Préchargement minimal (utile aux tests)
-- ==========================
INSERT INTO t10_valence (label, description)
VALUES ('positive','valence positive'), ('neutre','valence neutre'), ('negative','valence négative')
ON CONFLICT (label) DO NOTHING;

INSERT INTO t01_type_donnee (libelle, description, frequence_maj, categorie_metier)
VALUES
  ('Fichier','Fichiers plats CSV/Parquet/JSON','hebdomadaire','descriptive'),
  ('Base de Données','Données relationnelles (PostgreSQL/SQLite)','quotidienne','usage'),
  ('API','Services REST externes','temps réel','usage'),
  ('Web Scraping','Extraction conforme RGPD','hebdomadaire','evaluation'),
  ('Big Data','Flux massifs (GDELT/GKG, logs)','quotidienne','qualite')
ON CONFLICT DO NOTHING;

-- (Optionnel) pays France
INSERT INTO t13_pays (nom) VALUES ('France') ON CONFLICT DO NOTHING;

-- ==========================
-- 10) Recommandations d’indexation complémentaires
-- ==========================
-- Documents: recherche par langue + date
CREATE INDEX IF NOT EXISTS idx_doc_lang_date ON t04_document(langue, date_publication);

-- Annotations: filtrage par polarity / période
CREATE INDEX IF NOT EXISTS idx_ann_polarity_date ON t05_annotation(polarity, date_annotation);

-- Émotions: jointures fréquentes (type / modèle / confiance)
CREATE INDEX IF NOT EXISTS idx_emo_type_modele_conf ON t08_emotion(id_type_emotion, id_modele, score_confiance);

-- Thèmes / classements
CREATE INDEX IF NOT EXISTS idx_doc_theme_doc ON t26_document_theme(id_doc);
CREATE INDEX IF NOT EXISTS idx_doc_event_doc ON t27_document_evenement(id_doc);

-- Météo: accès par type et période
CREATE INDEX IF NOT EXISTS idx_meteo_type_date ON t19_meteo(id_type_meteo, date_obs);

-- Indicateurs: accès territorial/annuel
CREATE INDEX IF NOT EXISTS idx_indic_annee ON t22_indicateur(annee);
